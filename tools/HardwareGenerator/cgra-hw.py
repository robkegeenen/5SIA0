#!/usr/bin/env python

import os
import errno
from optparse import OptionParser
from optparse import OptionGroup
from Parser import Parser
from Instantiate import Instantiate

VERBOSE = False

def parse_options():
    parser = OptionParser('Usage: %prog [options] file')
    # General options
    parser.add_option("-v", "--verbose", action="store_true", dest="verbose",
                  default=False, help="Run in verbose mode")
 
    # Input/Output options
    parser.add_option("-O", dest="outDir",
        help='Directory where all verilog files will be generated',
        default="./generated/")

    parser.add_option("-T", dest="templateDir",
        help='Directory where the templated files are located',
        default="./templates/")

    parser.add_option("-d", dest="designName",
        help='Name of the design used throughout Verilog generation',
        default="CGRA")

    parser.add_option("-c", dest="configOut",
        help='Path to instance config file that will be generated by this tool',
        default=None)

    parser.add_option("-m", dest="magicLoad",
        help='Load the data memory via the DTL bus (0) or \'magically\'(1) when running the testbench',
        default=1)

    parser.add_option("-g", "--graph",
        action="store",
        dest="outputDOT", 
        default=None,
        help='Specify file to output a DOT graph (optional)')

    parser.add_option("-M", "--memsim",
        action="store",
        dest="memsyn", 
        default=0,
        help='Generate hardware for synthesis with memories')    
    
    parser.add_option("-s", "--switchboxes", 
        type="choice", 
        action="store",
        dest="buildNW", 
        choices=['0', '1'],
        default='1',
        help='Select whether to instantiate a switchbox network (1) or to directly conenct the FU outputs together (0)')

    #parse
    (opts, args) = parser.parse_args()
    return (opts, args)

if __name__ == '__main__':
    (opts, args) = parse_options()
    VERBOSE = opts.verbose

    try:
        os.makedirs(opts.outDir)
    except OSError as exception:        
        if exception.errno != errno.EEXIST:
            raise
    
    if len(args) != 0:
        Cfg = Instantiate(args[0],opts.designName, opts.templateDir, opts.outDir, opts.outputDOT, opts.buildNW, opts.magicLoad, opts.memsyn, configOut=opts.configOut)  
    else:
        print 'Usage: %prog [options] file\n\nUse -h for full help.'


